# -*- coding: utf-8 -*-
"""Profissao Analista de dados M10 Exercicio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Jfv2RMcBY6GZd4MxyVDvO6NJjDvYJ8Q

<img src="https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/main/media/logo/newebac_logo_black_half.png" alt="ebac-logo">

---

# **Módulo** | Análise de Dados: Coleta de Dados I
Caderno de **Exercícios**<br>
Professor [André Perez](https://www.linkedin.com/in/andremarcosperez/)

---

# **Tópicos**

<ol type="1">
  <li>Arquivos CSV;</li>
  <li>Arquivos Texto;</li>
  <li>Arquivos Excel.</li>
</ol>

---

# **Exercícios**

## 0\. Preparando o ambiente

Vamos explorar dados de crédito presentes no arquivo `credito.xlsx` ([link](https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/develop/dataset/credito.xlsx)). Os dados estão no formato de **Excel** (XLSX) e contém informações sobre clientes de uma instituição financeira. Em especial, estamos interessados em explicar a segunda coluna, chamada de **default**, que indica se um cliente é adimplente (`default = 0`), ou inadimplente (`default = 1`), ou seja, queremos entender o porque um cliente deixa de honrar com suas dívidas baseado no comportamento de outros atributos, como salário, escolaridade e movimentação financeira. Uma descrição completa dos atributos está abaixo.

| Coluna  | Descrição |
| ------- | --------- |
| id      | Número da conta |
| default | Indica se o cliente é adimplente (0) ou inadimplente (1) |
| idade   | --- |
| sexo    | --- |
| depedentes | --- |
| escolaridade | --- |
| estado_civil | --- |
| salario_anual | Faixa do salario mensal multiplicado por 12 |
| tipo_cartao | Categoria do cartao: blue, silver, gold e platinium |
| meses_de_relacionamento | Quantidade de meses desde a abertura da conta |
| qtd_produtos | Quantidade de produtos contratados |
| iteracoes_12m | Quantidade de iteracoes com o cliente no último ano |
| meses_inatico_12m | Quantidade de meses que o cliente ficou inativo no último ano |
| limite_credito | Valor do limite do cartão de crédito |
| valor_transacoes_12m | Soma total do valor das transações no cartão de crédito no último ano |
| qtd_transacoes_12m | Quantidade total de transações no cartão de crédito no último ano |

Faça o download do arquivo `credito.xlsx` com a célula de código abaixo.
"""

!wget --show-progress --continue -O ./credito.xlsx https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/main/dataset/credito.xlsx

"""---

## 1\. Excel para CSV

Utilizando o pacote Python `openpyxl` visto em aula, extraia os seguintes as colunas `id`, `sexo` e `idade` para dos clientes inadimplentes (`default = 1`) e solteiros (`estado_civil = 'solteiro'`). Salves os dados extraídos no arquivo csv `credito.csv` separado por `;`. Exemplo do cabeçalho e das três primeiras linhas:

```
id;sexo;idade
767712558;59;M
713741358;46;M
772390908;59;M
```

**Dica:** O arquivo csv `credito.csv` deve ter 669 linhas, contando com o cabeçalho.

**Nota:** Escreva o código da sua solução abaixo em uma ou mais células, você não precisa enviar o arquivo csv gerado.
"""

!pip install openpyxl

from openpyxl import load_workbook

planilhas = load_workbook(filename='credito.xlsx')
dados_credito = planilhas.active

dados_extraidos = []

cabecalho = next(dados_credito.values)
indice_id = cabecalho.index('id')
indice_sexo = cabecalho.index('sexo')
indice_idade = cabecalho.index('idade')
indice_default = cabecalho.index('default')
indice_estado_civil = cabecalho.index('estado_civil')
for linha in dados_credito.values:
    id, sexo, idade, default, estado_civil = linha[indice_id], linha[indice_sexo], linha[indice_idade], linha[indice_default], linha[indice_estado_civil]
    if default == 1 and estado_civil == 'solteiro':
        dados_extraidos.append((id, sexo, idade))

print(dados_extraidos)

import csv

with open('credito.csv', 'w', newline='', encoding='utf-8') as arquivo:
    csvwriter = csv.writer(arquivo, delimiter=';')
    csvwriter.writerow(['id', 'sexo', 'idade'])
    csvwriter.writerows(dados_extraidos)

"""---

## 2\. Excel para JSON

Como preparação para o próximo módulo, vamos trabalhar com o JSON, um formato semi-estruturado, muito utilizado em transmissão de dados da web e equivalente a um **dicionário** Python.

Utilizando o pacote Python `openpyxl` visto em aula, extraia os dados das colunas `escolaridade` e `tipo_cartao`, removendo duplicados. Com os dados, construa o dicionário Python `credito` com a seguinte estrutura:

```python
credito = {
  'tipo_cartao': ['silver', 'blue', 'gold', 'platinum'],
  'escolaridade': ['doutorado', 'mestrado', 'na', 'sem educacao formal', 'graduacao', 'ensino medio']
}
```

Para finalizar, utilize o código abaixo para converter o dicionário `credito` no formato JSON:

```python
import json

credito_json = json.dumps(credito, indent=4)
print(credito_json)
```

**Dica:** Sua solução deve gerar o dicionário Python `credito` igual ao exemplo mas a ordem dos elementos pode variar tranquilamente.

**Dica:** Uma excelente forma de remover elementos duplicados de uma lista é convertê-la para `set` e depois para `list` novamente.
"""

from openpyxl import load_workbook

planilhas = load_workbook(filename='credito.xlsx')
dados = planilhas.active

escolaridades = set()
tipos_cartao = set()

cabecalho = next(dados.values)
indice_escolaridade = cabecalho.index('escolaridade')
indice_cartao = cabecalho.index('tipo_cartao')
for linha in dados.values:
    escolaridade, tipo_cartao = linha[indice_escolaridade], linha[indice_cartao]
    escolaridades.add(escolaridade)
    tipos_cartao.add(tipo_cartao)

escolaridades_dic = list(escolaridades)
tipos_cartao_dic = list(tipos_cartao)

credito = {
    'tipo_cartao': tipos_cartao_dic,
    'escolaridade': escolaridades_dic
}

print(credito)

import json

credito_json = json.dumps(credito, indent=4)
print(credito_json)

"""---

## 3\. BÔNUS: Texto para CSV

No arquivo de texto `ebac.txt` você encontra o texto presente no rodapé da página de cursos da EBAC ([link](https://ebaconline.com.br/)).

**Arquivo TXT:** ebac.txt
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile ebac.txt
# MÍDIAS SOCIAIS
# Instagram, Facebook, Youtube, LinkedIn
# 
# CURSOS
# Software, Design, Marketing, Audiovisual, Programação & Data, Games
# 
# WEBINARS
# Próximos, Anteriores
# 
# SOBRE
# Sobre nós, Centro de carreiras, Vagas
# 
# CONTATO
# WhatsApp +55 (11) 4200-2991
# Telefone +55 (11) 3030-3200
# 
# BLOG
# Design, Audiovisual, Marketing

"""Extraia os números de contato do arquivo texto `ebac.txt` e salve-os no arquivo csv `contato_ebac.csv` com o separador `;` no seguinte formato:

```
tipo;numero
whatsapp;+551142002991
telefone;+551130303200
```

**Nota:** Escreva o código da sua solução abaixo em uma ou mais células, você não precisa enviar o arquivo csv gerado.
"""

with open('ebac.txt', 'r', encoding='utf-8') as arquivo:
  linhas = arquivo.readlines()
  linhas = filter(lambda linha: linha != '\n', linhas)
  linhas = map(lambda linha: linha.strip(), linhas)
  linhas = list(linhas)

print(linhas)

with open(file='./ebac.txt', mode='r', encoding='utf8') as arquivo:
    texto = arquivo.read()

contatos = re.findall(r'(\w+)\s+\+\d+\s+\((\d+)\)\s+(\d+-\d+)', texto)
print(contatos)

contatos_formatados = []

for contato in contatos:
    tipo = contato[0].lower()  # Converte o tipo para minúsculas (WhatsApp ou Telefone)
    numero = f'+55{contato[1]}{contato[2]}'  # Formata o número
    contatos_formatados.append([tipo, numero])

with open('contato_ebac.csv', 'w', newline='', encoding='utf-8') as arquivo_csv:
    csv_writer = csv.writer(arquivo_csv, delimiter=';')
    csv_writer.writerow(['tipo', 'numero'])
    csv_writer.writerows(contatos_formatados)

"""---"""